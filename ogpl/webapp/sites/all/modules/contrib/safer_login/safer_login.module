<?php
// $Id: safer_login.module,v 1.10 2010/09/18 17:05:02 richardp Exp $


/**
 * Implementation of hook_menu
 *
 */
function safer_login_menu() {
  $items = array();
  
  $items["admin/settings/safer-login"] = array(
    "title" => "Safer login",
    "description" => "Configure the Safer login module",
    "page callback" => "drupal_get_form",
    "page arguments" => array("safer_login_admin_form"),
    "access arguments" => array("administer safer login"),
    "type" => MENU_NORMAL_ITEM,
  );

  $items["safer-login/test"] = array(
    "title" => "Safer login MD5 test",
    "page callback" => "safer_login_md5_test",
    "access arguments" => array("administer safer login"),
    "type" => MENU_CALLBACK,
  );
  
  $items["safer-login/ajax-get-token-md5/%"] = array(
    "page callback" => "safer_login_ajax_get_token_md5",
    "access callback" => TRUE,
    "type" => MENU_CALLBACK,
  );
  
  return $items; 
}

/**
 * Very simple function, meant to be called by ajax.  It will return
 * the MD5 of the current token.
 *
 */
function safer_login_ajax_get_token_md5() {
  print md5($_SESSION["safer_login_token"]);
}


/**
 * To keep Drupal's cache_page table from getting too full with
 * our junk URLs, let's wipe them out with the cron run (since they should
 * never be used more than once anyway).
 *
 */
function safer_login_cron() {
  db_query("DELETE FROM {cache_page} WHERE cid LIKE '%%safer-login/ajax%%' ");
}



/**
 * Implementation of hook_perm
 *
 */
function safer_login_perm() {
  return array("administer safer login");
}


/**
 * This is an MD5 test which compares the PHP md5 function
 * with the javascript md5 function.  It is included here strictly
 * for educational reasons, and is never actually used by the module.
 * You can run it by going to example.com/safer-login/test
 */
function safer_login_md5_test() {
  $rtn = "";
  
  safer_login_add_js(NULL);
  
  $limit = 200;
  
  $rtn .= "Testing <span id='encode_test_limit'>$limit</span> calculations...";
  
  $rtn .= "<div><a href='javascript: saferLoginPerformMD5Test();'>Perform the test</a>  (refresh the page to start over)</div>";
  
  $rtn .= "<table border='1'>
            <tr>
              <td>To encode</td>
              <td>PHP result</td>
              <td>JS result</td>
              <td>Success?</td>
            </tr>";
  
  // This list of chars can't include the < char, as that screws with the jquery.
  $chars = "&0123456789_!@#$%*( )-=+`~^|][{}:;,.>/abcdfghjkmnpqrstvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\"\n\\";
  // Create some random strings and get their MD5's.
  for ($t = 0; $t < $limit; $t++) {
    
    $to_encode = "";
    for ($p = 0; $p < 8; $p++) {
        $to_encode .= $chars[mt_rand(0, strlen($chars) - 1)];
    }    
    
    $to_encode_md5 = md5($to_encode);
    
    $rtn .= "<tr>
              <td id='to_encode_$t'>$to_encode</td>
              <td id='to_encode_md5_$t'>$to_encode_md5</td>
              <td id='js_encode_md5_$t'></td>
              <td id='js_encode_result_$t'></td>
            </tr>";
    
  } 
  
  $rtn .= "</table>";
  
  return $rtn;
}




/**
 * This is the form which the admin user interacts with at admin/settings/safer-login
 *
 */
function safer_login_admin_form() {
  $form = array();
  
  $form["safer_login_allow_bypass"] = array(
    "#title" => t("Allow visitors to bypass the safer login security measures."),
    "#type" => "checkbox",
    "#default_value" => variable_get("safer_login_allow_bypass", 0),
    "#description" => t("If checked, visitors will be given a checkbox below the log in form,
                        which lets them opt-out of using safer login, causing Drupal to handle
                        the login in the traditional way."),
  );
  
  $form["safer_login_allow_bypass_msg"] = array(
    "#type" => "textfield",
    "#title" => "Message for the bypass checkbox",
    "#default_value" => variable_get("safer_login_allow_bypass_msg", t("Log in using higher security? (requires javascript)")),
    "#description" => t("If you are allowing visitors to bypass security measures above, please enter
                        the text for the checkbox here."),    
  );

  
  $form["safer_login_minimal_protection"] = array(
    "#title" => t("Use minimal protection (use at your own risk)."),
    "#type" => "checkbox",
    "#default_value" => variable_get("safer_login_minimal_protection", 0),
    "#description" => t("If checked, passwords will <strong>not</strong> be encrypted with a unique
                        salt, but rather use the same salt each time.  The result is that passwords
                        would not be sent in clear-text, and would be almost impossible to break-- but--
                        a hacker could capture the hashes and use them to log into your site.
                        <strong>The only reason</strong> to use this is if you want to be able to use
                        a password manager to keep track of your hashes.  It's better than Drupal's default
                        login method, but not the best it could be."),
  );
  
  
  return system_settings_form($form);
  
}


/**
 * Implementation of hook_init.  Generate a unique token to store in the session.
 *
 */
function safer_login_init() {
  
  // Check to make sure safer_login is installed correctly.
  safer_login_check_correct_install();
  
  if (!$_SESSION["safer_login_token"]) {
    // Generate a login token for this user (we will clear this session variable
    // after they log in.
    safer_login_generate_new_login_token();    
  }
   
}


/**
 * This function, which is called by both hook_init() and hook_requirements(),
 * checks to make sure that Safer Login is correctly installed (and that the jQuery MD5 plugin
 * is installed correctly).
 * 
 * It is called by both hook_requirements and hook_init to ensure that it is displayed on every
 * page, as an incorrect installation opens a security vulnerability.
 * 
 * We will make sure the jQuery MD5 installation is installed using either the Libraries API
 * method, or is under modules/safer_login/jquery_md5
 * 
 * returns $requirements, which may be used by hook_requirements.
 *
 */
function safer_login_check_correct_install($bool_display_msg = TRUE) {
  $requirements = $jquery_md5 = array();
  
  // This handy function returns the name localization function, either 't' or 'st'.
  // It's used in code that needs to run both during installation and normal operation.
  $t = get_t();
  
  $library_path = array();
  
  // Begin by placing the default path where the plugin might be.
  $library_path[] = drupal_get_path('module', 'safer_login') . '/jquery_md5';  
  
 
      
  // First we check to see if the libraries API is available.
  if (function_exists('libraries_get_path')) {
    $library_path[] = libraries_get_path('jquery_md5');
  }

  // Now iterate over all possible paths and act accordingly.
  foreach ($library_path as $path) {
    // We check for all possibilities. Packed, minified and source
    // versions of the JS file.
    $jquery_md5 = drupal_system_listing('^jquery\.md5\.[(?:min|packed)\.]*js$', $path, 'name', 0);
    if ($jquery_md5) {
      // Found it, so break out of the foreach.
      break;
    }
  }
  // Now we signal an error in the installation. 
  if (empty($jquery_md5)) {
    $msg = $t('Safer Login is not configured correctly.  
                Please download the ' . l($t('jQuery MD5 plugin'), 'http://plugins.jquery.com/project/md5') . ' 
                and install it under %safer_login_dir.  If you are using the Libraries API
                module, you may also install it under %site_all_wide_location. 
                The file should be renamed to %fn.
                If you have already installed the plugin using the Libraries API 
                method and have just enabled this module,
                try refreshing the page to see if this message disappears.', array('%site_all_wide_location' => 'site/all/libraries/jquery_md5','%safer_login_dir' => $library_path[0], '%fn' => 'jquery.md5.js'));
    
    // Since this is a pretty important problem, we will display it on screen as well.
    if ($bool_display_msg) {
      drupal_set_message($msg, 'error');
    }
    
    $requirements['safer_login'] = array(
      'title' => $t('Safer Login jQuery MD5'),
      'description' => $msg,
      'severity' => REQUIREMENT_ERROR,
      'value' => $t('jQuery MD5 missing'),
    );        
  }
  else {
    // We now create the variable with the jQuery MD5 js file location.
    $jquery_md5_location = array_key_exists('jquery.md5.packed', $jquery_md5) ? $jquery_md5['jquery.md5.packed']->filename : (array_key_exists('jquery.md5.min', $jquery_md5) ? $jquery_md5['jquery.md5.min']->filename : $jquery_md5['jquery.md5']->filename);
    // Check to see if there are changes to be made. E.g. a packed version
    // now exists and we want it to replace the source or minified
    // version.
    if ($jquery_md5_location != variable_get('safer_login_jquery_md5_location', '')) {
      variable_set('safer_login_jquery_md5_location', $jquery_md5_location);
      if ($bool_display_msg) {
        drupal_set_message("Safer Login: jQuery MD5 plugin found at $jquery_md5_location.");
      }
    }
    
    
    $requirements['safer_login']= array(
      'title' => $t('Safer Login jQuery MD5'),
      'severity' => REQUIREMENT_OK,
      'value' => variable_get('safer_login_jquery_md5_location', $jquery_md5_location),
    );
  }
  
  return $requirements;
}


/**
 * Very simply, it generates a "login token" and places it in the session.
 * I needed this in its own function, because it is something which happens
 * several times.
 *
 */
function safer_login_generate_new_login_token() {
  
  $salt = mt_rand(1,99999);
  
  // If the administrator is using minimal protection, then we will use
  // the same salt every time.  This way, the user's password hash, which
  // is still double-hashed, is always the same.  This lowers their protection,
  // but it does let them use password managers.
  if (variable_get("safer_login_minimal_protection", 0)) {
    $salt = "safer_login_123_min_protection_456";
  }
  
  $_SESSION["safer_login_token"] = safer_login_get_token($salt);  
}


/**
 * Implementation of hook_form_alter.
 * Basically we need to add our new login validate function in with the other
 * login validate functions already there.
 *
 */
function safer_login_form_alter(&$form, &$form_state, $form_id) {

  if($form_id == 'user_login' || $form_id == 'user_login_block'){

    // If the site is in offline_mode, we should just skip any attempt to 
    // use this module, otherwise the user will not be able to log in at all,
    // due to what happens with the drupal bootstrap while the site is in offline
    // mode.
    if (variable_get("site_offline", "")) {
      drupal_set_message("Since the site is in offline mode, the Safer Login module
                          will be bypassed.");
      return;
    }
    
    //looking for the original user authentication function
    $array_key = array_search('user_login_authenticate_validate', $form['#validate']);
    
    //can't find it. I'll rebuild the #validate array with my
    //function called just before the final validator
    if($array_key === FALSE){
      $final_validator = array_pop($form['#validate']);
      $form['#validate'][] = 'safer_login_validate';
      $form['#validate'][] = $final_validator;
    }
    else {
      //found it, now to do the swap
      $form['#validate'][$array_key] = 'safer_login_validate';    
    }
    
    // Now, we also need to attach our javascript to this form.
    // We will do this using an "after_build" function call to load our javascript.
    // It is required we do it that way, because otherwise the JS would not be
    // loaded if a person fails validation and tries again.
    if (!is_array($form["submit"]["#after_build"])) {
      $form["submit"]["#after_build"] = array("safer_login_add_js");
    }
    else {
      $form["submit"]["#after_build"][] = "safer_login_add_js";
    }   
    
    // Finally, if the administrator enabled it, let's give the visitor
    // a checkbox to enable/disable using safer_login.
    if (variable_get("safer_login_allow_bypass", 0) == 1) {
      $form["safer_login_checkbox"] = array(
        "#type" => "checkbox",
        "#title" => variable_get("safer_login_allow_bypass_msg", t("Log in using higher security? (requires javascript)")),
        "#default_value" => 1,
      );
    }     
  }
    
}


/**
 * This function is called through an #after_build I placed on the submit button, in hook_form_alter.
 * It has to be done this way to ensure that even on cached forms, these files still get added.
 * If we didn't do this, then when someone failed validation (because they mistyped a
 * password), these files wouldn't be included when the page reloaded.
 *
 */
function safer_login_add_js($element) {
  
  $jquery_md5_location = variable_get('safer_login_jquery_md5_location', '');
  if ($jquery_md5_location == "") {
    // This variable has not been set up yet, possibly because the user is upgrading from an older
    // version.  Let's initialize it to our default location for now.  It will be reset as soon
    // as the user visits the /admin page, thanks to hook_requirements in the .install file.
    $jquery_md5_location = drupal_get_path('module', 'safer_login') . '/jquery_md5/jquery.md5.js';
  }

  // add the js files themselves.
  drupal_add_js($jquery_md5_location);  
  drupal_add_js(drupal_get_path('module', 'safer_login') . '/js/safer_login.js');

  return $element;
}


/**
 * This is the function which will actually log in the user by comparing
 * the MD5's.  At this point, the user's password field from the form
 * will either == their plain text password, or a hash of a hash of their
 * password + the md5 of the login token.
 * 
 * In other words, if they are using the module as expected, password
 * should look like this:
 * $password LOOKS LIKE md5(md5(pass) . md5(login_token))
 *
 */
function safer_login_validate($form, &$form_state) {
  
  $username = $form_state['values']['name'];
  $password = $form_state['values']['pass'];

  $bool_success = FALSE;
  
  // Test drupal's user table to see if the user has supplied the
  // correct password in plain text.
  $result = db_result(db_query("SELECT name FROM {users} 
                              WHERE name = '%s'
                              AND pass = '%s' ", $username, md5($password)));
  if ($result == $username) {
    $bool_success = TRUE;
  }

  // Does the visitor even want us to use safer_login?
  if (!isset($form_state["values"]["safer_login_checkbox"])
      || $form_state["values"]["safer_login_checkbox"] == 1) {
  
    if (!$bool_success) {
      // That lookup failed.  So, let's see if we are using the safer_login method
      // of password hashing.
      // Remove our prefix from the password field submitted.
      $password = str_replace("~~safer_login~~", "", $password);
      
      $db_pass_hash = db_result(db_query("SELECT pass FROM {users} WHERE
                                name = '%s' ", $username));
      if ($db_pass_hash != "") {
        // At this point, if the user supplied the correct password,
        // then $password should equal md5($db_pass_hash . md5(safer_login_token))
        if ($password == md5($db_pass_hash . md5($_SESSION["safer_login_token"]))) {
          $bool_success = TRUE;
        }      
      }    
    }
  }
  
  if ($bool_success) {
    // The user has authenticated.
    user_external_login_register($username, "safer_login");
    user_authenticate_finalize($form_state["values"]);        

  }

  // Clear out the SESSION token whether they authenticated or not.
  // (This would cause a new one to be generated, but that's okay. It ensures
  //  we get a new token if they log out and back in.)
  unset($_SESSION["safer_login_token"]);
  
}



/**
 * Returns a token.  Very similar to drupal's drupal_get_token, except we do not
 * want to tie this to the session_id (as that function does), 
 * since we are dealing with a user who is trying
 * to log in, and their session_id will have changed.
 *
 * @param string $value
 * @return string
 */
function safer_login_get_token($value = "") {
  $private_key = drupal_get_private_key();
  return md5($value . $private_key);
}