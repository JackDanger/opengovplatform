<?php

/**
 * Implementation of hook_menu().
 */
function dms_customizations_menu() {
  $items = array();

  $items['dms/subagency/populate/callback/ahah'] = array(
    'page callback' => 'dms_customizations_subagency_populate_callback_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['dms/subsector/populate/callback/ahah'] = array(
    'page callback' => 'dms_customizations_subsector_populate_callback_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function dms_customizations_menu_alter(&$items) {
  //This entry corrects an AHAH access callback bug in the contributed module flexifield_filefield.module.
  //The menu item 'flexifield-filefieldâ€¦' access callback 'filefield_edit_access' expects at least 2 parameters.
  //More information is found here; http://drupal.org/node/853742#comment-3210312.
  $items['flexifield-filefield/ahah/%/%/%/%']['access arguments'] = array(2, 3);
}

/**
 * Implementation of hook_views_api().
 */
function dms_customizations_views_api() {
  return array('api' => 2);
}

/**
* Custom ahah callback handler to populate dataset subsector field.
*/
function dms_customizations_subsector_populate_callback_ahah() {
  // Ensure we have a array of all integer elements.
  $catogery = $_POST['field_ds_sector']['nid']['nid'];
  if (is_array($catogery)) {
    foreach ($catogery as &$value) {
      $value = intval($value);
    }
  }
  else {
    $catogery = intval($catogery);
    $catogery = array($catogery);
  }

  // Turn it into a list of integers
  $catogery = implode(",", $catogery);

  // Manually add the None option if needed.
  // TODO: drupal_render the element instead of manually assembling the options.
  $cat_sub = '<option value="">- ' . t('None') . ' -</option>';

  $query = "SELECT n.title, c.nid FROM {content_type_sub_sector} c, {node} n WHERE n.nid = c.nid AND c.field_sector_nr_nid IN (%s)";
  $result = db_query($query, $catogery);
  $options = array('' => t('- None -'));

  while ($obj = db_fetch_object($result)) {
    $cat_sub .= "<option value={$obj->nid}>{$obj->title}</option>";
    $options[$obj->nid] = $obj->title;
  }

  // The form is generated in an include file which we need to include manually.
  include_once 'modules/node/node.pages.inc';
  // We're starting in step #3, preparing for #4.
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Step #4.
  $form = form_get_cache($form_build_id, $form_state);

  // Preparing for #5.
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Step #5.
  drupal_process_form($form_id, $form, $form_state);
  // Step #6 and #7 and #8.
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);


  $form['group_ds_all_datasets']['field_ds_sub_sector_nr']['nid']['nid']['#options'] = $options;

  form_set_cache($form_build_id, $form, $form_state);

  //skip validation for ahah
  drupal_get_messages('error');
  form_set_error(null, '', true);

  drupal_json(array(
    'status'   => TRUE,
    'data'     => $cat_sub,
  ));
}

/**
* Custom ahah callback handler to populate profile subagency field.
*/
function dms_customizations_subagency_populate_callback_ahah() {

  // Ensure we have a array of all integer elements.
  $catogery = $_POST['field_prof_agency']['nid']['nid'];
  if (is_array($catogery)) {
    foreach ($catogery as &$value) {
      $value = intval($value);
    }
  }
  else {
    $catogery = intval($catogery);
    $catogery = array($catogery);
  }

  // Turn it into a list of integers
  $catogery = implode(",", $catogery);

  // Manually add the None option if needed.
  // TODO: drupal_render the element instead of manually assembling the options.
  $cat_sub = '<option value="">- ' . t('None') . ' -</option>';

  $query = "SELECT n.title, c.nid FROM {content_type_sub_agency} c, {node} n WHERE n.nid = c.nid AND c.field_sa_subagency_agency_nid IN (%s)";
  $result = db_query($query, $catogery);

  while ($obj = db_fetch_object($result)) {
    $cat_sub .= "<option value={$obj->nid}>{$obj->title}</option>";
  }

  drupal_json(array(
    'status'   => TRUE,
    'data'     => $cat_sub,
  ));
}

/**
 * Implementation of hook_form_alter().
 */
function dms_customizations_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_register':
      // Add a new hidden element to attach ahah.
      // Because of a bug in "jQuery Update" module as discussed here http://drupal.org/node/1051696
      // Potential patches here http://drupal.org/node/806500
      $form['ahah_trigger'] = array(
        '#type' => 'hidden',
      );

      break;

    case 'profile_node_form':

      // Add a new hidden element to attach ahah.
      // Because of a bug in "jQuery Update" module as discussed here http://drupal.org/node/1051696
      // Potential patches here http://drupal.org/node/806500
      $form['ahah_trigger'] = array(
        '#type' => 'hidden',
      );

      $ahah_binding = array(
        'url'   => url('dms/subagency/populate/callback/ahah'),
        'event' => 'change',
        'wrapper' => 'edit-field-prof-sub-agency-nid-nid',
        'selector' => '#edit-ahah-trigger',
        'effect'   => 'slide',
        'method'   => 'replace',
        'effect'   => 'none',
        'progress' => array('type' => 'none'),
      );

      // List of valid the options for 'sub_category_field' based on category selection.
      $valid_subs = dms_customizations_profile_populate_subagency($form['field_prof_agency']['#default_value']);

      drupal_add_js('misc/jquery.form.js');
      drupal_add_js('misc/ahah.js');
      drupal_add_js(array(
        'ahah' => array('edit-field-prof-sub-agency-nid-nid' => $ahah_binding),
        'valid_subs' => $valid_subs,
      ), 'setting');


      // Trigger ahah whenever 'category_filed' selection changed.
      // Remove the redudent <div> under <select> added by ahah.
      drupal_add_js('jQuery(document).ready(function () {
        $("#edit-field-prof-agency-nid-nid").change(function(){$("' . $ahah_binding['selector'] . '").triggerHandler("change");});
        $("#edit-field-prof-sub-agency-nid-nid").ajaxComplete(function(){
   $(this).html($(this).find("option").parent().html());
        });
        $("#edit-field-prof-sub-agency-nid-nid option").each(function() {
          if ($(this).val() && jQuery.inArray($(this).val(), Drupal.settings.valid_subs) == -1) {
            $(this).remove();
          }
        });
      });', 'inline');

      break;

    case 'dataset_node_form':
      $form['#cache'] = TRUE;

      if ($node = $form['#node']) {
        global $user;
        $roles = $user->roles;
        $author = user_load($node->uid);

        // If the logged in user has the Agency POC role and the node was created by a data steward show the sendback option
        $role_check = ($user->uid == 1 || !isset($roles['4']) || (isset($roles['4']) && isset($author->roles['3'])));

        if (!$role_check) {
          unset($form['workflow']['Dataset Management System']['#options']['5']);
        }
      }

      $profile = content_profile_load('profile', $user->uid);
      $admin_user = ($user->uid == 1);

      if(isset($profile->field_prof_agency[0]['nid']) && !$admin_user) {
        $form['field_ds_agency_name']['#default_value'][0]['nid'] = $profile->field_prof_agency[0]['nid'];
      }

      if(isset($profile->field_prof_sub_agency[0]['nid']) && !$admin_user) {
        $form['field_ds_sub_agency']['#default_value'][0]['nid'] = $profile->field_prof_sub_agency[0]['nid'];
      }

      $form['#after_build'][] = 'dms_customizations_dataset_after_build';

      //Dataset sector field ahah alters

      // Add a new hidden element to attach ahah.
      // Because of a bug in "jQuery Update" module as discussed here http://drupal.org/node/1051696
      // Potential patches here http://drupal.org/node/806500
      $form['ahah_trigger'] = array(
        '#type' => 'hidden',
      );

      $ahah_binding = array(
        'url'   => url('dms/subsector/populate/callback/ahah'),
        'event' => 'change',
        'wrapper' => 'edit-field-ds-sub-sector-nr-nid-nid',
        'selector' => '#edit-ahah-trigger',
        'effect'   => 'slide',
        'method'   => 'replace',
        'effect'   => 'none',
        'progress' => array('type' => 'none'),
      );

      drupal_add_js('misc/jquery.form.js');
      drupal_add_js('misc/ahah.js');
      drupal_add_js(array('ahah' => array('edit-field-ds-sub-sector-nr-nid-nid' => $ahah_binding)), 'setting');

      // Trigger ahah whenever 'category_filed' selection changed.
      // Remove the redudent <div> under <select> added by ahah.
      drupal_add_js('jQuery(document).ready(function () {
        $("#edit-field-ds-sector-nid-nid").change(function(){$("' . $ahah_binding['selector'] . '").triggerHandler("change");});
        $("#edit-field-ds-sub-sector-nr-nid-nid").ajaxComplete(function(){
   $(this).html($(this).find("option").parent().html());
        });
      });', 'inline');

      // Minimize the options for sub categories based on category selection.
      $form['#after_build'][] = 'dms_customizations_dataset_populate_subsector_after_build';


      break;

    case 'workflow_tab_form':
      $form['workflow']['workflow_comment']['#description'] = 'Enter any additional comments.';

      if (isset($_GET['workflow_state'])) {
        $node = $form['node']['#value'];
        $wid = workflow_get_workflow_for_type($node->type);
        $workflow_name = workflow_get_name($wid);
        $sid = (int)$_GET['workflow_state'];
        $form['workflow'][$workflow_name]['#default_value'] = $sid;

        if (isset($_REQUEST['destination'])) {
          $form['cancel'] = array('#type' => 'markup', '#value' => l(t('Cancel'), $_REQUEST['destination'], array('attributes' => array('class' => 'cancel-button'))));
        }

        global $user;
        $roles = $user->roles;
        $author = user_load($node->uid);

        // If the logged in user has the Agency POC role and the node was created by a data steward show the sendback option
        $role_check = ($user->uid == 1 || !isset($roles['4']) || (isset($roles['4']) && isset($author->roles['3'])));

        if (!$role_check) {
          unset($form['workflow']['Dataset Management System']['#options']['5']);
        }

      }
      break;

    case 'views_exposed_form':
      switch ($form['#id']) {
        case 'views-exposed-form-dataset-management-block-2':
          if (empty($_REQUEST['sid'])) { $form_state['input']['sid'] = array('5' => '5'); }
          break;

        case 'views-exposed-form-dataset-management-block-3':
          if (empty($_REQUEST['sid'])) { $form_state['input']['sid'] = array('6' => '6'); }
          break;

        case 'views-exposed-form-dataset-management-block-4':
          if (empty($_REQUEST['sid'])) { $form_state['input']['sid'] = array('7' => '7'); }
          break;

        default:
          break;
      }
      break;

    case 'views_bulk_operations_form__1':
      //Configure Views Bulk OPeration Settings
      if (isset($form['select']['operation']['#options'])) {
        global $user;
        $roles = $user->roles;

        if ($user->uid == 1) {
          //User 1 has access to all actions
        }
        else if (isset($roles['3'])) {
          //Select actions for 'Data Steward' role
          unset($form['select']['operation']['#options']['workflow_customizations_sendback_action']);
          if (isset($form['select']['operation']['#options']['workflow_customizations_approve_action'])) {
            $form['select']['operation']['#options']['workflow_customizations_approve_action'] = 'Submit';
          }
        }
        else if (isset($roles['9'])) { 
          //Select actions for 'Manager' role
          unset($form['select']['operation']['#options']['workflow_customizations_sendback_action']);
          unset($form['select']['operation']['#options']['workflow_customizations_approve_action']);
          unset($form['select']['operation']['#options']['views_bulk_operations_delete_node_action']);
        }        
      }

      $form['select']['#weight'] = '50';

      if (isset($form['actions']['cancel']['#value'])) {
        $form['actions']['cancel']['#value'] = str_replace('class="active">Cancel</a>', 'class="active cancel-button">Cancel</a>', $form['actions']['cancel']['#value']);
      }

      if (isset($form['cancel']['#value'])) {
        $form['cancel']['#value'] = str_replace('class="active">Cancel</a>', 'class="active cancel-button">Cancel</a>', $form['cancel']['#value']);
      }

      if ($form['target_sid']) {
        $states = workflow_customizations_non_system_workflow_states(); 
        foreach($form['target_sid']['#options'] as $wid => $value) {
          foreach($value as $sid => $name) {
            if (empty($states[$sid])) {
              unset($form['target_sid']['#options'][$wid][$sid]);
            }
          }
        }
      }
      break;

    case 'webform_client_form_101':
      $form['actions']['cancel'] = array('#type' => 'markup', '#value' => l(t('Cancel'), $_REQUEST['destination'], array('attributes' => array('class' => 'cancel-button'))), '#weight' => 50);
      break;

    case 'user_register':
       if ($form['account']) {
          $form['account']['mail']['#description'] = 'This will be used for login and email notifications.';
          $form['account']['notify']['#default_value'] = 1; // enable notification by default
          $form['account']['notify']['#disabled'] = 1; // forbid modifying this value
       } else {
          $form['mail']['#description'] = 'This will be used for login and email notifications.';
          $form['notify']['#default_value'] = 1; // enable notification by default
          $form['notify']['#disabled'] = 1; // forbid modifying this value
       }
       if ($form['password_policy'] && $form['password_policy']['force_password_change']) {
          $form['password_policy']['force_password_change']['#default_value'] = 1; // ensure value checked
          $form['password_policy']['force_password_change']['#disabled'] = 1; // forbid modifying this value
       }
       break;

    default:
      break;
  }

  // Limit role filter for POC(4) and Data Steward(3) users
  if ($form_id == 'views_exposed_form' && isset($form['rid'])) {
     global $user;
     if (array_intersect(array(3,4), array_keys($user->roles))) {
        $form['rid']['#options'] = array(
           '4' => 'Organization POC',
           '3' => 'Data Steward',
        );
     }
  }

  // If form is editable we add a cancel button that redirects to $base_url.
  if (isset($form['buttons'])) {
     $base = $GLOBALS['base_url'];
     $form['buttons']['cancel'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#weight' => '15',
        '#attributes' => array('onClick' => 'location.replace(\''.$base.'\'); return false;'),
     );
  }
}

// implementation of hook_email_registration_name
function dms_customizations_email_registration_name($edit, $account) {
   // use email address as username
   return $edit['mail'];
}

/**
* Custom after_build callback handler.
*/
function dms_customizations_fetch_subagencies($agency) {
  $sql = 'select nid, field_sa_subagency_name_value from {content_type_sub_agency} where field_sa_subagency_agency_nid = %d';
  $options = array('' => '- None -');
  $result = db_query($sql, $agency);

  while ($row = db_fetch_object($result)) {
    $options[$row->nid] = $row->field_sa_subagency_name_value;
  }

  return $options;
}

/**
* Custom after_build callback handler.
*/
function dms_customizations_dataset_after_build($form, &$form_state) {
  global $user;
  $profile = content_profile_load('profile', $user->uid);
  $admin_user = ($user->uid == 1);

  $agency_otpions = $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#options'];
  $agency_value = $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#value'];

  //For new datasets use the user profile agency field
  if(!isset($form['#node']->nid) && isset($agency_value)) {
    $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#options'] = array($agency_value => $agency_otpions[$agency_value]);
    dms_customizations_dataset_fix_disabled($form['group_ds_all_datasets']['field_ds_agency_name']);

    $subagency_options = dms_customizations_fetch_subagencies($agency_value);
    $subagency_value = $profile->field_prof_sub_agency[0]['nid'];

    if(isset($subagency_value)) {
      $form['group_ds_all_datasets']['field_ds_sub_agency']['nid']['nid']['#options'] = array($subagency_value => $subagency_options[$subagency_value]);
      dms_customizations_dataset_fix_disabled($form['group_ds_all_datasets']['field_ds_sub_agency']);
    }
    else {
      $form['group_ds_all_datasets']['field_ds_sub_agency']['nid']['nid']['#options'] = $subagency_options;
    }
  }
  //For existing datasets disable the agency field
  else {
    dms_customizations_dataset_fix_disabled($form['group_ds_all_datasets']['field_ds_agency_name']);
    $agency_selected_value = $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#value'];
    $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#options'] = array($agency_selected_value  => $agency_otpions[$agency_selected_value]);

    $subagency_options = dms_customizations_fetch_subagencies($agency_selected_value);
    $form['group_ds_all_datasets']['field_ds_sub_agency']['nid']['nid']['#options'] = $subagency_options;
  }

  return $form;
}


function dms_customizations_profile_populate_subagency($agencys) {

  $subs = array();

  if (!$agencys || !$agencys[0]['nid']) {
    return $subs;
    }

  $ags = array();
  foreach ($agencys as $ag) {
    $ags[] = $ag['nid'];
  }
  $ags = implode(",", $ags);

  $query = "SELECT n.title, c.nid FROM {content_type_sub_agency} c, {node} n WHERE n.nid = c.nid AND c.field_sa_subagency_agency_nid IN (%s)";
  $result = db_query($query, $ags);

    while ($obj = db_fetch_object($result)) {
    $subs[] = $obj->nid;
  }

  return $subs;
}

/**
* Custom after_build callback handler.
*/
function dms_customizations_dataset_populate_subsector_after_build($form, &$form_state) {
  $form['group_ds_all_datasets']['field_ds_sub_sector_nr']['nid']['nid']['#options'] = array();

  // Find the default category, if any.
  $categorys = $form['group_ds_all_datasets']['field_ds_sector']['#default_value'];
  if ($categorys) {
    $cats = array();
    foreach ($categorys as $cat) {
      $cats[] = $cat['nid'];
    }

    $cats = implode(",", $cats);

    if($cats) {
    $query = "SELECT n.title, c.nid FROM {content_type_sub_sector} c, {node} n WHERE n.nid = c.nid AND c.field_sector_nr_nid IN (%s)";
    $result = db_query($query, $cats);

    $form['group_ds_all_datasets']['field_ds_sub_sector_nr']['nid']['nid']['#options'][''] = '- None -';

    while ($obj = db_fetch_object($result)) {
      $form['group_ds_all_datasets']['field_ds_sub_sector_nr']['nid']['nid']['#options'][$obj->nid] = $obj->title;
    }
  }
  }

  return $form;
}

/**
* Recursively set the disabled attribute of a CCK field
* and all its dependent FAPI elements.
*/
function dms_customizations_dataset_fix_disabled(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      dms_customizations_dataset_fix_disabled($elements[$key]);
    }
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}


/**
 * Implementation of hook_file_download
 *
 */
function dms_customizations_file_download($filepath) {
  $filepath = file_create_path($filepath);
  $result = db_query("SELECT * FROM {files} WHERE filepath = '%s'", $filepath);

  // Ensure case-sensitivity of uploaded file names.
  while ($file = db_fetch_object($result)) {
    if (strcmp($file->filepath, $filepath) == 0) {
      break;
    }
  }

  // If the file is not found in the database, we're not responsible for it.
  if (empty($file)) {
    return;
  }

  // See if this is a file on a newly created node, on which the user who
  // uploaded it will immediately have access.
  $new_node_file = $file->status == 0 && isset($_SESSION['filefield_access']) && in_array($file->fid, $_SESSION['filefield_access']);
  if ($new_node_file) {
    $denied = FALSE;
  } else {
    //get parent node
    $result = db_query("select nid from content_type_dataset where field_ds_datafile_fid = '%s'", $file->fid);
    $row = db_fetch_object($result);
    $nid = $row->nid;

    //Check if node is of type dataset
    if (($node = node_load($nid)) && $node->type == 'dataset') {
      if (node_access('view', $node)) {
        $denied = FALSE;
      } else {
        $denied = TRUE;
      }
    }
  }

  if ($denied) {
    return -1;
  } else {
    //access granted
    $name = mime_header_encode($file->filename);
    $type = mime_header_encode($file->filemime);
    return array(
      'Content-Type: ' . $type . '; name="' . $name . '"',
      'Content-Length: ' . $file->filesize,
      'Content-Disposition: attachment; filename="' . $name . '"',
      'Cache-Control: private',
    );
  }
}

